#!/usr/bin/env ruby
require_relative '../lib/spelleken_van_mit'

####
# Available events
#
#   * svm.game_window.bootstrapped
#
#     # Called when the game window has finished bootstrap
#     SVM::Event.on 'svm.game_window.bootstrapped'
#       # Do something when the game window has bootstrapped
#     end
#
#   * svm.game_window.restarted
#
#     # Called when the game is being restarted
#     SVM::Event.on 'svm.game_window.restarted' do
#       # Do something when the game is restarted
#     end
#
#   * svm.game_window.card_clicked
#
#     # Called when a card has been clicked
#     SVM::Event.on 'svm.game_window.mouse_down' do |card|
#       # Do something when card is clicked
#     end
#
#   * svm.game_window.card_shown
#
#     # Called when a card is set to show
#     SVM::Event.on 'svm.game_window.card_shown' do |card|
#       # Do something when a card is set to show
#     end
#
#   * svm.game_window.bad_card_drawn
#
#     # Called when a bad (2) card was drawn
#     SVM::Event.on 'svm.game_window.bad_card_drawn' do |card|
#       # Do something when a bad card was drawn
#     end
#
#   * svm.card_set.before_populate
#
#     # Called before population of the card set
#     SVM::Event.on 'svm.card_set.before_populate' do |set|
#       # Do something before population of card set
#     end
#
#   * svm.card_set.after_populate
#
#     # Called after population of the card set
#     SVM::Event.on 'svm.card_set.after_populate' do |set|
#       # Do something after population of card set
#     end
#
#   * svm.card_set.card_added
#
#     # Called when a card is added to a card set
#     SVM::Event.on 'svm.card_set.before_populate' do |set, card|
#       # Do something when a card is added to a card set
#     end

#                             resX resY fullscreen fps
$window = SVM::GameWindow.new(905, 600, false,     24.to_fps)
begin
  $stdout.puts "Welkom bij het #{SVM::CAPTION} v#{SVM::VERSION}. Enjoy!"
  $stdout.puts SVM::Config if SVM::Config['debug']
  $window.bootstrap
  $window.show
rescue Interrupt
  $stderr.puts String::EOL + 'Quitting...'
  exit 1
ensure
  $window.close
  $stdout.puts String::EOL
end
